using System;
using System.Collections.Generic;

using System.Runtime.InteropServices;
using System.Text;

namespace OpenCL
{
	[StructLayout(LayoutKind.Explicit)]
	public struct Kernel : IDisposable
	{
		[FieldOffset(0)]
		private int id;

		#region AutoGenerated Code

		public void SetArgument(int argumentID, byte value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, byte2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, byte3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, byte4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, sbyte value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, sbyte2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, sbyte3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, sbyte4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, short value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, short2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, short3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, short4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ushort value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ushort2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ushort3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ushort4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, int value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, int2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, int3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, int4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, uint value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, uint2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, uint3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, uint4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, long value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, long2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, long3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, long4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ulong value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ulong2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ulong3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, ulong4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, float value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, float2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, float3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, float4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, double value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, double2 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, double3 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}

		public void SetArgument(int argumentID, double4 value)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)Marshal.SizeOf(value), ref value));
		}



		#endregion
		public void SetArgument(int argumentID, Memory buffer)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, 4, ref buffer));
		}

		public void SetArgument(int argumentID, IntPtr data, int length)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)length, data));
		}

		public unsafe void SetArgument(int argumentID, void* data, int length)
		{
			if (argumentID < 0) throw new ArgumentException("argumentID can't be smaller 0", "argumentID");
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clSetKernelArg(this, (uint)argumentID, (uint)length, data));
		}

		public int ID
		{
			get { return id; }
			set { id = value; }
		}

		public void Dispose()
		{
			OpenCLNative.ThrowError(OpenCLNative.NativeMethods.clReleaseKernel(this));
		}

		#region Static Methods

		/// <summary>
		/// Compiles a single kernel from a single source file
		/// </summary>
		/// <param name="context">The context for the kernel.</param>
		/// <param name="device">The device the kernel should be compiled for.</param>
		/// <param name="source">Source file for the kernel.</param>
		/// <param name="kernelName">Kernel name.</param>
		/// <returns>Compiled kernel.</returns>
		public static Kernel CompileFrom(Context context, Device device, string source, string kernelName)
		{
			var program = context.CreateProgram(source);
			try
			{
				program.Build("", device);
			}
			catch(OpenCLException ex)
			{
				string buildlog = program.GetBuildLog(device);
				throw new InvalidOperationException(buildlog, ex);
			}
			return program.CreateKernel(kernelName);
		}

		#endregion
	}
}
